// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace RootNamespace
{

using global::System;
using global::FlatBuffers;

public struct SimpleType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SimpleType GetRootAsSimpleType(ByteBuffer _bb) { return GetRootAsSimpleType(_bb, new SimpleType()); }
  public static SimpleType GetRootAsSimpleType(ByteBuffer _bb, SimpleType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SimpleType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int IntValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StringValue { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringValueBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetStringValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStringValueArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<SimpleType> CreateSimpleType(FlatBufferBuilder builder,
      int intValue = 0,
      StringOffset stringValueOffset = default(StringOffset)) {
    builder.StartObject(2);
    SimpleType.AddStringValue(builder, stringValueOffset);
    SimpleType.AddIntValue(builder, intValue);
    return SimpleType.EndSimpleType(builder);
  }

  public static void StartSimpleType(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddIntValue(FlatBufferBuilder builder, int intValue) { builder.AddInt(0, intValue, 0); }
  public static void AddStringValue(FlatBufferBuilder builder, StringOffset stringValueOffset) { builder.AddOffset(1, stringValueOffset.Value, 0); }
  public static Offset<SimpleType> EndSimpleType(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SimpleType>(o);
  }
  public static void FinishSimpleTypeBuffer(FlatBufferBuilder builder, Offset<SimpleType> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSimpleTypeBuffer(FlatBufferBuilder builder, Offset<SimpleType> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
